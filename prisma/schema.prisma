generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Beat {
  id          String      @id @default(cuid())
  title       String
  producer    String
  price       Float
  bpm         Int
  key         String
  tags        String[]
  genre       String
  mood        String
  imageUrl    String
  audioUrl    String
  waveformUrl String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model License {
  id           String   @id @default(cuid())
  name         String
  type         LicenseType
  description  String
  price        Float
  features     String[]
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderItems   OrderItem[]
}

model OrderItem {
  id          String      @id @default(cuid())
  orderId     String
  beatId      String
  licenseId   String
  licenseType LicenseType
  price       Float
  beat        Beat        @relation(fields: [beatId], references: [id])
  order       Order       @relation(fields: [orderId], references: [id])
  license     License     @relation(fields: [licenseId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}

enum LicenseType {
  basic
  premium
  exclusive
}
