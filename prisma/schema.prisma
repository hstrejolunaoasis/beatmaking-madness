generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Beat {
  id          String      @id @default(cuid())
  title       String
  producer    String
  price       Float
  bpm         Int
  key         String
  tags        String[]
  genreId     String
  genre       Genre       @relation(fields: [genreId], references: [id])
  mood        String
  description String      @default("")
  imageUrl    String
  audioUrl    String
  waveformUrl String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  licenses    BeatLicense[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model LicenseType {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  licenses    License[]
  orderItems  OrderItem[]
}

model License {
  id           String       @id @default(cuid())
  name         String
  licenseTypeId String
  licenseType  LicenseType  @relation(fields: [licenseTypeId], references: [id])
  description  String
  price        Float
  features     String[]
  active       Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orderItems   OrderItem[]
  beats        BeatLicense[]
}

model OrderItem {
  id            String       @id @default(cuid())
  orderId       String
  beatId        String
  licenseId     String
  licenseTypeId String
  price         Float
  beat          Beat         @relation(fields: [beatId], references: [id])
  order         Order        @relation(fields: [orderId], references: [id])
  license       License      @relation(fields: [licenseId], references: [id])
  licenseType   LicenseType  @relation(fields: [licenseTypeId], references: [id])
}

model BeatLicense {
  id        String   @id @default(cuid())
  beatId    String
  licenseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  beat      Beat     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  license   License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([beatId, licenseId])
}

model Genre {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  active      Boolean  @default(true)
  beats       Beat[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}
